{"ast":null,"code":"var _jsxFileName = \"/Users/josephbruno/employee-directory/user-directory/src/App.js\";\nimport React, { useState } from \"react\";\nimport Table from \"./components/Table\";\nimport Row from \"./components/Row\";\nimport Col from \"./components/Col\";\nimport Wrapper from \"./components/Wrapper\";\nimport DropDown from \"./components/Dropdown\";\nimport employees from \"./employees.json\";\n\nfunction App() {\n  const [orderState, setOrderState] = useState('id');\n  const [employeesState, setEmployeesState] = useState(employees);\n  const [keysState, setKeysState] = useState(Object.keys(employeesState[0]));\n\n  function departmentKeys() {\n    let keys = [];\n    employeesState.map(employee => {\n      return keys.push(employee.department);\n    });\n    let uniqueKeys = Array.from(new Set(keys));\n    return uniqueKeys;\n  }\n\n  ;\n\n  function reset() {\n    console.log(\"We need to reset the array.\");\n  }\n\n  ;\n\n  function changeParams(type, affectedRow) {\n    if (type === \"sort\") {\n      setOrderState(affectedRow);\n\n      if (affectedRow === \"salary\" || affectedRow === \"id\") {\n        let optionOne = `a.${affectedRow}`;\n        let optionTwo = `b.${affectedRow}`;\n        const query = optionOne - optionTwo;\n        const sorted = employeesState.sort((optionOne, b) => eval(query));\n        console.log(sorted);\n      } else {\n        const query = `a.${affectedRow}`.localeCompare`(b.${affectedRow})`;\n        console.log(query);\n        const sorted = employeesState.sort((a, b) => eval(query));\n        console.log(sorted);\n      }\n\n      ;\n    } else {\n      console.log(affectedRow);\n      const filtered = employeesState.filter(employee => {\n        return employee.department === affectedRow;\n      });\n      setEmployeesState(filtered);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Employee Directory\")), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    className: \"col-md-12 d-flex justify-content-center align-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    keys: keysState,\n    data: employeesState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(DropDown, {\n    name: \"sort\",\n    type: \"success\",\n    keys: keysState,\n    func: changeParams,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), \"\\xA0\", /*#__PURE__*/React.createElement(DropDown, {\n    name: \"filter by department\",\n    type: \"secondary\",\n    keys: departmentKeys(),\n    func: changeParams,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), \"\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger btn-lg btn-block\",\n    onClick: reset(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Reset\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/josephbruno/employee-directory/user-directory/src/App.js"],"names":["React","useState","Table","Row","Col","Wrapper","DropDown","employees","App","orderState","setOrderState","employeesState","setEmployeesState","keysState","setKeysState","Object","keys","departmentKeys","map","employee","push","department","uniqueKeys","Array","from","Set","reset","console","log","changeParams","type","affectedRow","optionOne","optionTwo","query","sorted","sort","b","eval","localeCompare","a","filtered","filter"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport Table from \"./components/Table\";\nimport Row from \"./components/Row\";\nimport Col from \"./components/Col\";\nimport Wrapper from \"./components/Wrapper\";\nimport DropDown from \"./components/Dropdown\";\nimport employees from \"./employees.json\";\n\nfunction App() {\n  const [orderState, setOrderState] = useState('id');\n  const [employeesState, setEmployeesState] = useState(employees);\n  const [keysState, setKeysState] = useState(Object.keys(employeesState[0]));\n\n  function departmentKeys() {\n    let keys = [];\n    employeesState.map(employee => {\n      return keys.push(employee.department);\n    });\n    let uniqueKeys = Array.from(new Set(keys));\n    return uniqueKeys;\n  };\n\n  function reset() {\n    console.log(\"We need to reset the array.\");\n  };\n\n  function changeParams(type, affectedRow) {\n    if (type === \"sort\") {\n      setOrderState(affectedRow);\n      if (affectedRow === \"salary\" || affectedRow === \"id\") {\n        let optionOne = `a.${affectedRow}`;\n        let optionTwo = `b.${affectedRow}`;\n        const query = optionOne - optionTwo\n        const sorted = employeesState.sort((optionOne,b) => eval(query)); \n        console.log(sorted);\n      } else {\n        const query = `a.${affectedRow}`.localeCompare`(b.${affectedRow})`;\n        console.log(query);\n        const sorted = employeesState.sort((a,b) => eval(query));\n        console.log(sorted);\n      };\n    } else {\n      console.log(affectedRow);\n      const filtered = employeesState.filter((employee) => {\n        return employee.department === affectedRow\n      });\n      setEmployeesState(filtered);\n    }\n  };\n\n  return(\n    <div className=\"my-5\">\n      <Wrapper>\n        <Row>\n          <h1>Employee Directory</h1>\n        </Row>\n        <Row>\n          <Col size=\"md-12\" className=\"col-md-12 d-flex justify-content-center align-content-center\">\n            <Table keys={keysState} data={employeesState} />\n          </Col>\n        </Row>\n\n          <DropDown name=\"sort\" type=\"success\" keys={keysState} func={changeParams} />\n          &nbsp;\n          <DropDown name=\"filter by department\" type=\"secondary\" keys={departmentKeys()} func={changeParams} />\n          &nbsp;\n          <button className=\"btn btn-danger btn-lg btn-block\" onClick={reset()}>Reset</button>\n      </Wrapper>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}